require 'minitest/autorun'
require 'minitest/pride'
require './lib/boat'
require './lib/renter'
require './lib/dock'

class DockTest < Minitest::Test

  def setup
    @dock = Dock.new("The Rowing Dock", 3)
    @kayak_1 = Boat.new(:kayak, 20)
    @kayak_2 = Boat.new(:kayak, 20)
    @sup_1 = Boat.new(:standup_paddle_board, 15)
    @canoe = Boat.new(:canoe, 25)
    @patrick = Renter.new("Patrick Star", "4242424242424242")
    @eugene = Renter.new("Eugene Crabs", "1313131313131313")
  end

  def test_it_exists

    assert_instance_of Dock, @dock
  end

  def test_it_has_attributes

    assert_equal "The Rowing Dock", @dock.name
    assert_equal 3, @dock.max_rental_time
  end

  def test_rental_log
    @dock.rent(@kayak_1, @patrick)
    @dock.rent(@kayak_2, @patrick)
    @dock.rent(@sup_1, @eugene)

    assert_equal ({
       @kayak_1 => @patrick,
       @kayak_2 => @patrick,
       @sup_1 => @eugene}), @dock.rental_log
  end

  def test_total_charge
    @dock.rent(@kayak_1, @patrick)
    @dock.rent(@kayak_2, @patrick)
    @dock.rent(@sup_1, @eugene)

    @kayak_1.add_hour
    @kayak_1.add_hour

    assert_equal 40, @dock.total_charge(@kayak_1)

    @sup_1.add_hour
    @sup_1.add_hour
    @sup_1.add_hour
    @sup_1.add_hour
    @sup_1.add_hour

    assert_equal 45, @dock.total_charge(@sup_1)
  end

  def test_charge_renter_for_boat
    @dock.rent(@kayak_1, @patrick)
    @dock.rent(@kayak_2, @patrick)
    @dock.rent(@sup_1, @eugene)
    @sup_1.add_hour
    @sup_1.add_hour
    @sup_1.add_hour
    @sup_1.add_hour
    @sup_1.add_hour
    @dock.charge(@sup_1)

    assert_equal ({
        :card_number => "1313131313131313",
        :amount => 45}), @dock.charge(@sup_1)

    @kayak_1.add_hour
    @kayak_1.add_hour

    assert_equal ({
        :card_number => "4242424242424242",
        :amount => 40}), @dock.charge(@kayak_1)
  end

  def test_log_hour_adds_to_hours_rented
    @dock.rent(@kayak_1, @patrick)
    @dock.rent(@kayak_2, @patrick)

    @dock.log_hour

    assert_equal 1, @kayak_1.hours_rented
    assert_equal 1, @kayak_2.hours_rented

    @dock.rent(@canoe, @patrick)
    @dock.log_hour

    assert_equal 2, @kayak_1.hours_rented
    assert_equal 2, @kayak_2.hours_rented
    assert_equal 1, @canoe.hours_rented
  end

  def test_return_all_boats
    @dock.rent(@kayak_1, @patrick)
    @dock.rent(@kayak_2, @patrick)

    @dock.log_hour
    @dock.rent(@canoe, @patrick)
    @dock.log_hour

    assert_equal 0, @dock.revenue

    @dock.return(@kayak_1)
    @dock.return(@kayak_2)
    @dock.return(@canoe)

    assert_equal [], @dock.rented_boats
    assert_equal 105, dock.revenue
  end
end

## Iteration 4

# Use TDD to update your `Dock` class with the following methods:
#
# * `return` - This method takes a `Boat` object as an argument.
#       When this method is called, it signifies that a boat has been returned and is no longer being rented.
# * `log_hour` - This method takes no arguments. When it is called,
#       all boats that are currently rented have been rented an additional hour.
# * `revenue` - This method takes no arguments.
#        It returns the total revenue generated by charging all boats that have been rented and returned.
        # A charge for a boat follows the same rules as iteration 3.
#
# The `Dock` class should now respond to the following interaction pattern:


#
# # Revenue should not be generated until boats are returned
# dock.revenue
# # => 0
#
# dock.return(kayak_1)
#
# dock.return(kayak_2)
#
# dock.return(canoe)
#
# # Revenue thus far
# dock.revenue
# # => 105
#
# # Rent Boats out to a second Renter
# dock.rent(sup_1, eugene)
#
# dock.rent(sup_2, eugene)
#
# dock.log_hour
#
# dock.log_hour
#
# dock.log_hour
#
# # Any hours rented past the max rental time don't factor into revenue
# dock.log_hour
#
# dock.log_hour
#
# dock.return(sup_1)
#
# dock.return(sup_2)
#
# # Total revenue
# dock.revenue
# # => 195
